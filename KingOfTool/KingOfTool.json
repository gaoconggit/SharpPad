{
  "name": "Example",
  "type": "folder",
  "files": [
    {
      "name": "KOT",
      "type": "folder",
      "files": [
        {
          "name": "逗号分隔",
          "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Linq;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        int[] intArrs = [462204, 2847, 22859, 79926];\n        var result = intArrs.Select(m => $\"'{m}'\");\n\n        string output = string.Join(\",\", result);\n        output.Dump();\n        \n    }\n}"
        },
        {
          "name": "时间戳",
          "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 获取当前时间\n        DateTimeOffset currentTime = DateTimeOffset.UtcNow;\n        // 计算时间戳（秒）\n        long timestampInSeconds = currentTime.ToUnixTimeSeconds();\n        // 计算时间戳（毫秒）\n        long timestampInMilliseconds = currentTime.ToUnixTimeMilliseconds();\n\n        Console.WriteLine(\"当前时间的时间戳（秒）: \" + timestampInSeconds);\n        Console.WriteLine(\"当前时间的时间戳（毫秒）: \" + timestampInMilliseconds);\n    }\n}"
        },
        {
          "name": "json格式化",
          "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        var jsonStr =\n        \"\"\"\n            {\n            \"messages\": [\n\n                {\n\n                \"content\": \"现在时间是:2024-12-10 14:21:24\\n你是一个插件助手，会各种插件的能力，讲话通俗易懂\",\n\n                \"role\": \"system\"\n\n                },\n\n                {\n\n                \"content\": \"你是什么模型\",\n\n                \"role\": \"user\"\n\n                }\n            ],\n\n            \"temperature\": 0.6,\n\n            \"top_p\": 0.5,\n\n            \"n\": 1,\n\n            \"stream\": true,\n\n            \"model\": \"gemini-exp-1206\"\n        }\n          \n        \"\"\";\n\n        var obj = JsonConvert.DeserializeObject(jsonStr);\n        Console.WriteLine(\"```json \\n\" + JsonConvert.SerializeObject(obj, Formatting.Indented) + \"\\n```\");\n    }\n}"
        },
        {
          "name": "正则提取",
          "content": "using System;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\npublic class Program\n{\n    public static void Main()\n    {\n        string str1 = \"步骤\\\"职能负责人（二级部门负责人）\\\"没有满足条件的处理人。\";\n        FetchNodeName(str1).Dump();\n\n        string str2 = \"步骤\\\"成本中心负责人\\\"没有满足条件的处理人。\";\n        FetchNodeName(str2).Dump();\n\n        string str3 = \"步骤\\\"CHR（薪酬福利）\\\"没有满足条件的处理人。\";\n        FetchNodeName(str3).Dump();\n\n    }\n\n    public static string FetchNodeName(string str)\n    {\n        Regex regex = new Regex($\"^步骤\\\\s*[\\\"“](?<NodeName>.*)[\\\"”]\\\\s*没有满足条件的处理人。$\", RegexOptions.IgnoreCase);\n\n        Match match = regex.Match(str);\n\n        return match.Groups[\"NodeName\"].Value;\n    }\n}"
        },
        {
          "name": "JWT解析",
          "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        string token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n\n        // 定义一个字段排序顺序字典 \n        var fieldOrder = new Dictionary<string, int>()\n        {\n            { \"exp\", 0 },\n            { \"iss\", 1 },\n            { \"aud\", 2 },\n            { \"client_id\", 3 },\n            { \"sub\", 4 },\n            { \"auth_time\", 5 },\n            { \"idp\", 6 },\n            { \"userid\", 7 },\n            { \"tenantid\", 8 },\n            { \"tenantname\", 9 },\n            { \"scope\", 10 },\n        };\n\n        JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();\n        JwtSecurityToken jwtToken = tokenHandler.ReadJwtToken(token);\n\n        Console.WriteLine(\"```json Header:\");\n        JsonConvert.SerializeObject(jwtToken.Header, Newtonsoft.Json.Formatting.Indented).Dump();\n        Console.WriteLine(\"```\");\n\n        Console.WriteLine(\"```json Payload:\");\n        // 将JWT令牌的负载解析为字典类型\n        var payloadDict = new Dictionary<string, object>();\n        foreach (var claim in jwtToken.Payload.Claims)\n        {\n            if (payloadDict.ContainsKey(claim.Type))\n            {\n                // 如果键已经存在，尝试将其值解析为数组并追加新值，否则执行添加操作\n                if (payloadDict[claim.Type] is object[] valueArray)\n                {\n                    payloadDict[claim.Type] = valueArray.Append(claim.Value).ToArray();\n                }\n                else\n                {\n                    payloadDict[claim.Type] = new object[] { payloadDict[claim.Type], claim.Value };\n                }\n            }\n            else\n            {\n                payloadDict.Add(claim.Type, claim.Value);\n            }\n        }\n\n        // 将字典按照预定义的顺序排序\n        var sortedDict = payloadDict.OrderBy(x => fieldOrder.ContainsKey(x.Key) ? fieldOrder[x.Key] : int.MaxValue)\n                                     .ToDictionary(x => x.Key, x => x.Value);\n\n        // 输出JWT令牌的负载部分\n        var json = JsonConvert.SerializeObject(sortedDict, Newtonsoft.Json.Formatting.Indented);\n        Console.WriteLine(json);\n\n    }\n}",
          "nugetConfig": {
            "packages": [
              {
                "id": "Microsoft.IdentityModel.Logging",
                "version": "8.3.0"
              }
            ]
          }
        },
        {
          "name": "HttpPostJson",
          "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Text;\n\nnamespace login\n{\n    public class Program\n    {\n        public async static Task Main()\n        {\n            var url = \"你的url\";\n\n            var body = \"\"\"\n                   {\n                     \n                   }\n                \"\"\";\n\n            await PostJsonAsync(url, body, showReqHeaders: false, showResHeaders: false);\n        }\n\n        #region PostJsonAsync\n        public static async Task PostJsonAsync(string url, string reqJson, bool showReqHeaders = false, bool showResHeaders = false)\n        {\n            using var client = new HttpClient();\n\n            var request = new HttpRequestMessage(HttpMethod.Post, url)\n            {\n                Content = new StringContent(reqJson, Encoding.UTF8, \"application/json\")\n            };\n\n            // 设置请求头（如果需要添加其他的头，也在下面添加）\n            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            if (showReqHeaders)\n            {\n                // 记录请求头\n                Console.WriteLine(\"Request Headers:\\n\");\n                Console.WriteLine(\"```json\\n\");\n\n                // 添加 URL 和 HTTP Method\n                Console.WriteLine($\"{request.Method} {url}\");\n                foreach (var header in request.Headers)\n                {\n                    Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n                }\n                Console.WriteLine(\"```\");\n            }\n\n            var response = await client.SendAsync(request);\n\n            if (showResHeaders)\n            {\n                // 记录响应头\n                Console.WriteLine(\"\\nResponse Headers:\");\n                Console.WriteLine(\"```json\\n\");\n                foreach (var header in response.Headers)\n                {\n                    Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n                }\n                Console.WriteLine(\"```\");\n            }\n\n            var body = await response.Content.ReadAsStringAsync();\n\n            Console.WriteLine(\"\\nResponse Body:\");\n            var obj = JsonConvert.DeserializeObject(body);\n            Console.WriteLine(\"```json \\n\" + JsonConvert.SerializeObject(obj, Formatting.Indented) + \"\\n```\");\n        }\n        #endregion\n    }\n}",
          "nugetConfig": {
            "packages": []
          }
        },
        {
          "name": "UrlEncode",
          "content": "using System;\nusing System.Net;\n\nclass Program\n{\n    static void Main()\n    {\n        string original = \"你好，爸爸!\";\n        string encoded = WebUtility.UrlEncode(original);\n        Console.WriteLine(encoded); // 输出: %E4%BD%A0%E5%A5%BD%EF%BC%8C%E7%88%B8%E7%88%B8%21\n    }\n}"
        },
        {
          "name": "UrlDecode",
          "content": "using System;\nusing System.Net;\n\nclass Program\n{\n    static void Main()\n    {\n        string encoded = \"%E4%BD%A0%E5%A5%BD%EF%BC%8C%E7%88%B8%E7%88%B8%21\";\n        string decoded = WebUtility.UrlDecode(encoded);\n        Console.WriteLine(decoded); // 输出: 你好，爸爸!\n    }\n}"
        },
        {
          "name": "QueryStringParse",
          "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Web;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        string url = \"http://qq.com?a=1&b=2\";\n\n        int index = url.IndexOf('#');\n        if (index != -1)\n        {\n            // 用 '?' 替换第一个 '#'\n            url = url.Remove(index, 1).Insert(index, \"?\");\n        }\n        Uri uri = new Uri(url);\n        string queryString = uri.Query;\n\n        // 移除开头的 '?'\n        if (queryString.StartsWith(\"?\"))\n        {\n            queryString = queryString.Substring(1);\n        }\n\n        // 解析 QueryString\n        Dictionary<string, string> queryParameters = new Dictionary<string, string>();\n        foreach (var kvp in queryString.Split('&'))\n        {\n            var keyValue = kvp.Split('=');\n            if (keyValue.Length == 2)\n            {\n                string key = Uri.UnescapeDataString(keyValue[0]);\n                string value = Uri.UnescapeDataString(keyValue[1]);  // 解码 URL 编码的值\n                queryParameters[key] = value;\n            }\n        }\n\n        // 输出\n        foreach (var kvp in queryParameters)\n        {\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n        }\n    }\n}"
        }
      ]
    },
    {
      "name": "WinForm",
      "type": "folder",
      "files": [
        {
          "name": "Winform.cs",
          "content": "using System;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WinFormsDemo\n{\n    public class MainForm : Form\n    {\n        private readonly Label labelMessage;\n\n        public MainForm()\n        {\n            // 设置窗体默认居中\n            StartPosition = FormStartPosition.CenterScreen;\n            Width = 800;\n            Height = 500;\n\n            // 初始化 Label\n            labelMessage = new Label\n            {\n                Dock = DockStyle.Fill,\n                Font = new System.Drawing.Font(\"Segoe UI\", 14), // 字体缩小一点\n                TextAlign = System.Drawing.ContentAlignment.MiddleCenter\n            };\n\n            Controls.Add(labelMessage);\n\n            // 窗体加载时启动文字显示\n            Load += async (_, __) => await ShowMessageAsync();\n        }\n\n        private async Task ShowMessageAsync()\n        {\n            string message = \"Hello, SharpPad! 关注我: https://github.com/gaoconggit/SharpPad\";\n            foreach (char c in message)\n            {\n                labelMessage.Text += c;\n                await Task.Delay(100);\n            }\n        }\n\n        [STAThread]\n        public static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new MainForm());\n        }\n    }\n}\n",
          "nugetConfig": {
            "packages": []
          }
        },
        {
          "name": "JWT.cs",
          "content": "using System;\nusing System.Collections.Generic;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\nusing System.Windows.Forms;\nusing Newtonsoft.Json;\n\npublic class MainForm : Form\n{\n    private TextBox txtToken;\n    private Button btnParse;\n    private Button btnClear;\n    private RichTextBox rtbResult;\n\n    public MainForm()\n    {\n        this.Text = \"JWT Token 解析器\";\n        this.Width = 800;\n        this.Height = 600;\n        this.StartPosition = FormStartPosition.CenterScreen;   // 窗体居中\n        this.FormBorderStyle = FormBorderStyle.FixedDialog;    // 固定大小\n        this.MaximizeBox = false;                              // 禁止最大化\n        this.Font = new System.Drawing.Font(\"Segoe UI\", 10);   // 统一字体\n\n        Label lbl = new Label\n        {\n            Text = \"请输入 JWT Token:\",\n            AutoSize = true,\n            Top = 20,\n            Left = 20\n        };\n        this.Controls.Add(lbl);\n\n        txtToken = new TextBox\n        {\n            Top = lbl.Bottom + 5,\n            Left = 20,\n            Width = 740,\n            Height = 60,                        // 更高\n            Multiline = true,                   // 多行输入\n            ScrollBars = ScrollBars.Vertical,   // 滚动条\n            Font = new System.Drawing.Font(\"Segoe UI\", 10)\n        };\n        this.Controls.Add(txtToken);\n\n        btnParse = new Button\n        {\n            Text = \"解析\",\n            Top = txtToken.Bottom + 10,\n            Left = 20,\n            Width = 100,\n            Height = 35\n        };\n        btnParse.Click += BtnParse_Click;\n        this.Controls.Add(btnParse);\n\n        btnClear = new Button\n        {\n            Text = \"清空\",\n            Top = txtToken.Bottom + 10,\n            Left = btnParse.Right + 10,\n            Width = 100,\n            Height = 35\n        };\n        btnClear.Click += (s, e) => { txtToken.Clear(); rtbResult.Clear(); };\n        this.Controls.Add(btnClear);\n\n        rtbResult = new RichTextBox\n        {\n            Top = btnParse.Bottom + 15,\n            Left = 20,\n            Width = 740,\n            Height = 400,\n            ReadOnly = true,\n            Font = new System.Drawing.Font(\"Consolas\", 10), // 等宽字体\n            ScrollBars = RichTextBoxScrollBars.Both,\n            WordWrap = false\n        };\n        this.Controls.Add(rtbResult);\n    }\n\n    private void BtnParse_Click(object sender, EventArgs e)\n    {\n        string token = txtToken.Text.Trim();\n        if (string.IsNullOrEmpty(token))\n        {\n            MessageBox.Show(\"请输入 JWT Token。\", \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n            return;\n        }\n\n        try\n        {\n            var fieldOrder = new Dictionary<string, int>()\n            {\n                { \"exp\", 0 },\n                { \"iss\", 1 },\n                { \"aud\", 2 },\n                { \"client_id\", 3 },\n                { \"sub\", 4 },\n                { \"auth_time\", 5 },\n                { \"idp\", 6 },\n                { \"userid\", 7 },\n                { \"tenantid\", 8 },\n                { \"tenantname\", 9 },\n                { \"scope\", 10 },\n            };\n\n            JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();\n            JwtSecurityToken jwtToken = tokenHandler.ReadJwtToken(token);\n\n            rtbResult.Clear();\n            rtbResult.AppendText(\"=== Header ===\\n\");\n            rtbResult.AppendText(JsonConvert.SerializeObject(jwtToken.Header, Formatting.Indented));\n            rtbResult.AppendText(\"\\n\\n\");\n\n            rtbResult.AppendText(\"=== Payload ===\\n\");\n            var payloadDict = new Dictionary<string, object>();\n            foreach (var claim in jwtToken.Payload.Claims)\n            {\n                if (payloadDict.ContainsKey(claim.Type))\n                {\n                    if (payloadDict[claim.Type] is object[] valueArray)\n                    {\n                        payloadDict[claim.Type] = valueArray.Append(claim.Value).ToArray();\n                    }\n                    else\n                    {\n                        payloadDict[claim.Type] = new object[] { payloadDict[claim.Type], claim.Value };\n                    }\n                }\n                else\n                {\n                    payloadDict.Add(claim.Type, claim.Value);\n                }\n            }\n\n            var sortedDict = payloadDict\n                .OrderBy(x => fieldOrder.ContainsKey(x.Key) ? fieldOrder[x.Key] : int.MaxValue)\n                .ToDictionary(x => x.Key, x => x.Value);\n\n            var json = JsonConvert.SerializeObject(sortedDict, Formatting.Indented);\n            rtbResult.AppendText(json);\n        }\n        catch (Exception ex)\n        {\n            MessageBox.Show(\"解析失败: \" + ex.Message, \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }\n    }\n\n    [STAThread]\n    public static void Main()\n    {\n        Application.EnableVisualStyles();\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.Run(new MainForm());\n    }\n}\n",
          "nugetConfig": {
            "packages": [
              {
                "id": "Microsoft.IdentityModel.Logging",
                "version": "8.3.0"
              },
              {
                "id": "System.IdentityModel.Tokens.Jwt",
                "version": "8.3.0"
              }
            ]
          }
        },
        {
          "name": "HttpForm.cs",
          "content": "// Program.cs\n// 需要 NuGet: RestSharp（示例基于 112.x）\n// 单文件 WinForms，可直接编译运行\n\nusing System;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing RestSharp;\n\nnamespace HttpJsonTester\n{\n    public sealed class MainForm : Form\n    {\n        // --- Top bar ---\n        private readonly TextBox txtUrl = new TextBox { Anchor = AnchorStyles.Left | AnchorStyles.Right };\n        private readonly ComboBox cboMethod = new ComboBox { DropDownStyle = ComboBoxStyle.DropDownList };\n        private readonly NumericUpDown nudTimeout = new NumericUpDown { Minimum = 1, Maximum = 300, Value = 30 };\n        private readonly Button btnSend = new Button { Text = \"Send\" };\n        private readonly Button btnClear = new Button { Text = \"Clear\" };\n        private readonly Button btnTheme = new Button { Text = \"🌙 Dark Mode\" };\n        private readonly CheckBox chkInspector = new CheckBox\n        {\n            Appearance = Appearance.Button,\n            AutoSize = true,\n            Text = \"Inspector\",\n            Checked = false // 默认折叠右侧检查器\n        };\n\n        // --- Request inputs (left) ---\n        private readonly TextBox txtHeaders = new TextBox { Multiline = true, ScrollBars = ScrollBars.Vertical };\n        private readonly TextBox txtBody = new TextBox { Multiline = true, ScrollBars = ScrollBars.Both, WordWrap = false };\n\n        // --- Logs (bottom tabs) ---\n        private readonly RichTextBox rtbReqLog = new RichTextBox { ReadOnly = true, DetectUrls = false };\n        private readonly RichTextBox rtbRespLog = new RichTextBox { ReadOnly = true, DetectUrls = false };\n\n        // --- Inspector (right) ---\n        private readonly TextBox txtRespStatus = new TextBox { ReadOnly = true };\n        private readonly TextBox txtRespTime = new TextBox { ReadOnly = true };\n        private readonly TextBox txtRespHeaders = new TextBox { Multiline = true, ReadOnly = true, ScrollBars = ScrollBars.Vertical };\n        private readonly TextBox txtRespBody = new TextBox { Multiline = true, ReadOnly = true, ScrollBars = ScrollBars.Both, WordWrap = false };\n\n        private SplitContainer _split = null!;\n        private CancellationTokenSource? _cts;\n        private bool _darkMode = false;\n\n        // Theme\n        private readonly Color themeColor = Color.FromArgb(52, 152, 219);\n        private readonly Color themeDark = Color.FromArgb(41, 128, 185);\n\n        // Log guard\n        private const int MaxLogChars = 1_000_000; // 防卡顿：最多保留 100 万字符\n\n        public MainForm()\n        {\n            Text = \"Post JSON Tester (.NET 8 + RestSharp)\";\n            Width = 1200;\n            Height = 750;\n            StartPosition = FormStartPosition.CenterScreen;\n            Font = new Font(\"Segoe UI\", 10F, FontStyle.Regular);\n\n            // Top bar styling\n            StyleButton(btnSend);\n            StyleButton(btnClear);\n            StyleButton(btnTheme);\n\n            cboMethod.Items.AddRange(new object[] { \"POST\", \"GET\", \"PUT\", \"PATCH\", \"DELETE\" });\n            cboMethod.SelectedIndex = 0;\n\n            var lblUrl = new Label { Text = \"URL\", AutoSize = true, Anchor = AnchorStyles.Left };\n            var lblMethod = new Label { Text = \"Method\", AutoSize = true, Anchor = AnchorStyles.Left };\n            var lblTimeout = new Label { Text = \"Timeout(s)\", AutoSize = true, Anchor = AnchorStyles.Left };\n\n            var top = new TableLayoutPanel\n            {\n                Dock = DockStyle.Top,\n                Height = 42,\n                BackColor = Color.FromArgb(245, 245, 245),\n                Padding = new Padding(6),\n                ColumnCount = 10\n            };\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // URL label\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100));             // URL\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Method label\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Method\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Timeout label\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Timeout\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Send\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Clear\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Theme\n            top.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));                 // Inspector toggle\n\n            top.Controls.Add(lblUrl, 0, 0);\n            top.Controls.Add(txtUrl, 1, 0);\n            top.Controls.Add(lblMethod, 2, 0);\n            top.Controls.Add(cboMethod, 3, 0);\n            top.Controls.Add(lblTimeout, 4, 0);\n            top.Controls.Add(nudTimeout, 5, 0);\n            top.Controls.Add(btnSend, 6, 0);\n            top.Controls.Add(btnClear, 7, 0);\n            top.Controls.Add(btnTheme, 8, 0);\n            top.Controls.Add(chkInspector, 9, 0);\n\n            // Left: headers + body\n            GroupBox MakeGroup(string title, Control inner, int height = 0)\n            {\n                var grp = new GroupBox\n                {\n                    Text = title,\n                    Dock = height > 0 ? DockStyle.Top : DockStyle.Fill,\n                    Height = height,\n                    Padding = new Padding(10),\n                    Font = new Font(\"Segoe UI\", 9.5F, FontStyle.Bold)\n                };\n                inner.Dock = DockStyle.Fill;\n                grp.Controls.Add(inner);\n                return grp;\n            }\n            var grpHeaders = MakeGroup(\"Headers (key: value per line)\", txtHeaders, 120);\n            var grpBody = MakeGroup(\"Body (JSON)\", txtBody);\n\n            var leftPanel = new Panel { Dock = DockStyle.Fill, Padding = new Padding(6) };\n            leftPanel.Controls.Add(grpBody);\n            leftPanel.Controls.Add(grpHeaders);\n\n            // Right: Inspector (Response)\n            var grpResp = MakeGroup(\"Response\", new Panel());\n            var inspector = new TableLayoutPanel { Dock = DockStyle.Fill, ColumnCount = 2, RowCount = 4, Padding = new Padding(4) };\n            inspector.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));\n            inspector.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100));\n            void AddRow(string label, Control ctrl, int row)\n            {\n                inspector.Controls.Add(new Label { Text = label, AutoSize = true, Font = new Font(\"Segoe UI\", 9F, FontStyle.Bold) }, 0, row);\n                inspector.Controls.Add(ctrl, 1, row);\n            }\n            AddRow(\"Status\", txtRespStatus, 0);\n            AddRow(\"Elapsed\", txtRespTime, 1);\n            AddRow(\"Headers\", txtRespHeaders, 2);\n            AddRow(\"Body\", txtRespBody, 3);\n            grpResp.Controls.Add(inspector);\n\n            // Split: left + inspector right\n            _split = new SplitContainer { Dock = DockStyle.Fill, SplitterDistance = 560 };\n            _split.Panel1.Controls.Add(leftPanel);\n            _split.Panel2.Controls.Add(grpResp);\n            _split.Panel2Collapsed = true; // 默认折叠\n\n            // Bottom tabs: request/response logs\n            var logsTabs = new TabControl { Dock = DockStyle.Bottom, Height = 230 };\n            var tpReq = new TabPage(\"Request Log\") { Padding = new Padding(6) };\n            var tpResp = new TabPage(\"Response Log\") { Padding = new Padding(6) };\n            rtbReqLog.Dock = DockStyle.Fill;\n            rtbRespLog.Dock = DockStyle.Fill;\n            tpReq.Controls.Add(rtbReqLog);\n            tpResp.Controls.Add(rtbRespLog);\n            logsTabs.TabPages.Add(tpReq);\n            logsTabs.TabPages.Add(tpResp);\n\n            // Compose\n            Controls.Add(_split);\n            Controls.Add(logsTabs);\n            Controls.Add(top);\n\n            // Events\n            btnSend.Click += async (_, __) => await SendAsync();\n            btnClear.Click += (_, __) => { rtbReqLog.Clear(); rtbRespLog.Clear(); };\n            btnTheme.Click += (_, __) => ToggleTheme();\n            chkInspector.CheckedChanged += (_, __) =>\n            {\n                _split.Panel2Collapsed = !chkInspector.Checked;\n                if (!_split.Panel2Collapsed)\n                {\n                    // 展开时给右侧留宽度，避免视觉上像“没反应”\n                    _split.SplitterDistance = Math.Max(420, Width - 520);\n                }\n            };\n\n            // Defaults\n            txtUrl.Text = \"https://httpbin.org/anything\";\n            txtBody.Text = \"{\\r\\n  \\\"hello\\\": \\\"world\\\"\\r\\n}\";\n            txtHeaders.Text = \"Content-Type: application/json\";\n\n            ApplyTheme();\n        }\n\n        // ----- UI helpers -----\n        private void StyleButton(Button btn)\n        {\n            btn.FlatStyle = FlatStyle.Flat;\n            btn.FlatAppearance.BorderSize = 0;\n            btn.Height = 32;\n            btn.Margin = new Padding(6, 0, 6, 0);\n            btn.Padding = new Padding(8, 0, 8, 0);\n            btn.Cursor = Cursors.Hand;\n        }\n\n        private void ToggleTheme()\n        {\n            _darkMode = !_darkMode;\n            btnTheme.Text = _darkMode ? \"☀️ Light Mode\" : \"🌙 Dark Mode\";\n            ApplyTheme();\n        }\n\n        private void ApplyTheme()\n        {\n            if (_darkMode)\n            {\n                BackColor = Color.FromArgb(45, 45, 48);\n                ForeColor = Color.White;\n                foreach (Control c in Controls) ApplyDark(c);\n            }\n            else\n            {\n                BackColor = Color.White;\n                ForeColor = Color.Black;\n                foreach (Control c in Controls) ApplyLight(c);\n            }\n\n            rtbReqLog.BackColor = _darkMode ? Color.FromArgb(30, 30, 30) : Color.White;\n            rtbReqLog.ForeColor = _darkMode ? Color.Gainsboro : Color.Black;\n            rtbRespLog.BackColor = rtbReqLog.BackColor;\n            rtbRespLog.ForeColor = rtbReqLog.ForeColor;\n\n            // Inspector toggle style\n            chkInspector.BackColor = _darkMode ? Color.Black : themeColor;\n            chkInspector.ForeColor = _darkMode ? themeColor : Color.White;\n        }\n\n        private void ApplyDark(Control ctrl)\n        {\n            ctrl.BackColor = Color.FromArgb(45, 45, 48);\n            ctrl.ForeColor = Color.White;\n            if (ctrl is Button b) { b.BackColor = Color.Black; b.ForeColor = themeColor; }\n            foreach (Control child in ctrl.Controls) ApplyDark(child);\n        }\n\n        private void ApplyLight(Control ctrl)\n        {\n            ctrl.BackColor = Color.White;\n            ctrl.ForeColor = Color.Black;\n            if (ctrl is Button b) { b.BackColor = themeColor; b.ForeColor = Color.White; }\n            foreach (Control child in ctrl.Controls) ApplyLight(child);\n        }\n\n        // ----- Core send -----\n        private async Task SendAsync()\n        {\n            if (_cts != null) { _cts.Cancel(); return; }\n\n            var url = txtUrl.Text.Trim();\n            if (string.IsNullOrWhiteSpace(url))\n            {\n                MessageBox.Show(\"URL 不能为空\", Text, MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                return;\n            }\n\n            var method = ParseMethod(cboMethod.SelectedItem?.ToString());\n            var headers = ParseHeaders(txtHeaders.Text);\n            var body = txtBody.Text;\n\n            _cts = new CancellationTokenSource(TimeSpan.FromSeconds((double)nudTimeout.Value));\n            btnSend.Text = \"Cancel\";\n            ClearInspector();\n\n            var reqId = Guid.NewGuid().ToString(\"N\")[..8].ToUpperInvariant();\n\n            // —— Request Log ——\n            LogDivider(rtbReqLog);\n            LogSection(rtbReqLog, $\"REQUEST  #{reqId}\");\n            LogInfo(rtbReqLog, $\"{method} {url}\");\n            if (headers.Length > 0)\n            {\n                LogInfo(rtbReqLog, \"Headers:\");\n                foreach (var (k, v) in headers) LogInfo(rtbReqLog, $\"  {k}: {v}\");\n            }\n            if (!string.IsNullOrWhiteSpace(body))\n            {\n                LogInfo(rtbReqLog, \"Body:\");\n                LogInfo(rtbReqLog, TryFormatJson(body), small: true);\n            }\n            LogInfo(rtbReqLog, \"cURL Preview:\");\n            LogInfo(rtbReqLog, BuildCurl(url, method, headers, body), small: true);\n\n            var sw = Stopwatch.StartNew();\n            try\n            {\n                var (statusLine, respHeaders, respBody) = await ExecuteAsync(url, method, headers, body, _cts.Token);\n\n                sw.Stop();\n                txtRespStatus.Text = statusLine;\n                txtRespTime.Text = $\"{sw.ElapsedMilliseconds} ms\";\n                txtRespHeaders.Text = respHeaders;\n                txtRespBody.Text = TryFormatJson(respBody);\n\n                // 自动展开 Inspector，确保“有结果就能看到”\n                if (!chkInspector.Checked) chkInspector.Checked = true;\n\n                // —— Response Log ——\n                LogDivider(rtbRespLog);\n                LogSection(rtbRespLog, $\"RESPONSE #{reqId}\");\n                LogInfo(rtbRespLog, $\"{statusLine}  ({sw.ElapsedMilliseconds} ms)\");\n                if (!string.IsNullOrWhiteSpace(respHeaders))\n                {\n                    LogInfo(rtbRespLog, \"Headers:\");\n                    LogInfo(rtbRespLog, respHeaders, small: true);\n                }\n                if (!string.IsNullOrWhiteSpace(respBody))\n                {\n                    LogInfo(rtbRespLog, \"Body:\");\n                    LogInfo(rtbRespLog, TryFormatJson(respBody), small: true);\n                }\n                else LogWarn(rtbRespLog, \"Body is empty.\");\n            }\n            catch (OperationCanceledException)\n            {\n                sw.Stop();\n                txtRespStatus.Text = \"Canceled\";\n                txtRespTime.Text = $\"{sw.ElapsedMilliseconds} ms\";\n\n                if (!chkInspector.Checked) chkInspector.Checked = true;\n\n                LogDivider(rtbRespLog);\n                LogSection(rtbRespLog, $\"CANCELED #{reqId}\");\n                LogWarn(rtbRespLog, $\"Request canceled after {sw.ElapsedMilliseconds} ms.\");\n            }\n            catch (Exception ex)\n            {\n                sw.Stop();\n                txtRespStatus.Text = \"Error\";\n                txtRespTime.Text = $\"{sw.ElapsedMilliseconds} ms\";\n                txtRespBody.Text = ex.Message;\n\n                if (!chkInspector.Checked) chkInspector.Checked = true;\n\n                LogDivider(rtbRespLog);\n                LogSection(rtbRespLog, $\"ERROR    #{reqId}\");\n                LogError(rtbRespLog, $\"{ex.GetType().Name}: {ex.Message}\");\n                if (ex.StackTrace != null) LogError(rtbRespLog, ex.StackTrace, small: true);\n            }\n            finally\n            {\n                _cts?.Dispose();\n                _cts = null;\n                btnSend.Text = \"Send\";\n            }\n        }\n\n        private static Method ParseMethod(string? text) =>\n            text switch\n            {\n                \"GET\" => Method.Get,\n                \"PUT\" => Method.Put,\n                \"PATCH\" => Method.Patch,\n                \"DELETE\" => Method.Delete,\n                _ => Method.Post\n            };\n\n        private static (string key, string value)[] ParseHeaders(string raw) =>\n            raw.Replace(\"\\r\", string.Empty)\n               .Split('\\n')\n               .Select(l => l.Trim())\n               .Where(l => !string.IsNullOrWhiteSpace(l))\n               .Select(l =>\n               {\n                   var idx = l.IndexOf(':');\n                   if (idx <= 0) return (string.Empty, string.Empty);\n                   return (l[..idx].Trim(), l[(idx + 1)..].Trim());\n               })\n               .Where(p => !string.IsNullOrWhiteSpace(p.Item1))\n               .ToArray();\n\n        private async Task<(string statusLine, string headers, string body)> ExecuteAsync(\n            string url, Method method, (string key, string value)[] headers, string body, CancellationToken ct)\n        {\n            var options = new RestClientOptions\n            {\n                ThrowOnAnyError = false,\n                MaxTimeout = (int)TimeSpan.FromSeconds((double)nudTimeout.Value).TotalMilliseconds\n            };\n\n            var client = new RestClient(options);\n            var request = new RestRequest(url, method);\n\n            foreach (var h in headers) request.AddHeader(h.key, h.value);\n            if (method != Method.Get && !string.IsNullOrWhiteSpace(body))\n                request.AddStringBody(body, ContentType.Json);\n\n            var response = await client.ExecuteAsync(request, ct);\n\n            var reason = string.IsNullOrWhiteSpace(response.StatusDescription)\n                ? response.StatusCode.ToString()\n                : response.StatusDescription;\n\n            var statusLine = $\"{(int)response.StatusCode} {reason}\";\n            var headerText = string.Join(Environment.NewLine, response.Headers.Select(h => $\"{h.Name}: {h.Value}\"));\n            var respBody = response.Content ?? string.Empty;\n\n            return (statusLine, headerText, respBody);\n        }\n\n        private void ClearInspector()\n        {\n            txtRespStatus.Text = string.Empty;\n            txtRespTime.Text = string.Empty;\n            txtRespHeaders.Text = string.Empty;\n            txtRespBody.Text = string.Empty;\n        }\n\n        // ----- Log helpers -----\n        private void LogDivider(RichTextBox target) => AppendLog(target, new string('─', 80), Color.Gray);\n\n        private void LogSection(RichTextBox target, string title) =>\n            AppendLog(target, $\"[{DateTime.Now:HH:mm:ss.fff}] {title}\", _darkMode ? Color.LightSkyBlue : Color.RoyalBlue, bold: true);\n\n        private void LogInfo(RichTextBox target, string message, bool small = false) =>\n            AppendLog(target, message, _darkMode ? Color.Gainsboro : Color.Black, small: small);\n\n        private void LogWarn(RichTextBox target, string message, bool small = false) =>\n            AppendLog(target, message, _darkMode ? Color.Khaki : Color.DarkOrange, small: small);\n\n        private void LogError(RichTextBox target, string message, bool small = false) =>\n            AppendLog(target, message, _darkMode ? Color.LightPink : Color.Crimson, bold: !small, small: small);\n\n        private void AppendLog(RichTextBox target, string text, Color? color = null, bool bold = false, bool small = false)\n        {\n            if (string.IsNullOrEmpty(text)) return;\n\n            void Append()\n            {\n                if (target.TextLength > MaxLogChars)\n                {\n                    target.Select(0, target.TextLength / 3);\n                    target.SelectedText = string.Empty;\n                }\n\n                var start = target.TextLength;\n                var prefix = text.StartsWith(\"[\") ? \"\" : $\"[{DateTime.Now:HH:mm:ss.fff}] \";\n                target.AppendText(prefix + text + Environment.NewLine);\n                target.Select(start, (prefix + text).Length);\n\n                if (color.HasValue) target.SelectionColor = color.Value;\n                if (bold || small)\n                {\n                    var f = target.SelectionFont ?? target.Font;\n                    var style = bold ? FontStyle.Bold : FontStyle.Regular;\n                    var size = small ? Math.Max(8f, f.Size - 1f) : f.Size;\n                    target.SelectionFont = new Font(f, style);\n                    if (small) target.SelectionFont = new Font(target.SelectionFont.FontFamily, size, style);\n                }\n\n                target.SelectionStart = target.TextLength;\n                target.ScrollToCaret();\n            }\n\n            if (target.InvokeRequired) target.Invoke((Action)Append);\n            else Append();\n        }\n\n        // ----- Text helpers -----\n        private string TryFormatJson(string text)\n        {\n            if (string.IsNullOrWhiteSpace(text)) return string.Empty;\n            try\n            {\n                using var doc = JsonDocument.Parse(text);\n                var opts = new JsonWriterOptions\n                {\n                    Indented = true,\n                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping\n                };\n                using var stream = new System.IO.MemoryStream();\n                using (var writer = new Utf8JsonWriter(stream, opts)) doc.WriteTo(writer);\n                return Encoding.UTF8.GetString(stream.ToArray());\n            }\n            catch { return text; }\n        }\n\n        private string BuildCurl(string url, Method method, (string key, string value)[] headers, string body)\n        {\n            var sb = new StringBuilder(\"curl\");\n            sb.Append(\" -X \").Append(method.ToString().ToUpperInvariant());\n            foreach (var (key, value) in headers)\n                sb.Append(\" -H \").Append('\"').Append(key.Replace(\"\\\"\", \"\\\\\\\"\")).Append(\": \").Append(value.Replace(\"\\\"\", \"\\\\\\\"\")).Append('\"');\n            if (method != Method.Get && !string.IsNullOrWhiteSpace(body))\n                sb.Append(\" --data \").Append('\"').Append(body.Replace(\"\\\"\", \"\\\\\\\"\").Replace(\"\\r\", \"\").Replace(\"\\n\", \"\")).Append('\"');\n            sb.Append(' ').Append('\"').Append(url).Append('\"');\n            return sb.ToString();\n        }\n    }\n\n    internal static class Program\n    {\n        [STAThread]\n        private static void Main()\n        {\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new MainForm());\n        }\n    }\n}\n",
          "nugetConfig": {
            "packages": [
              {
                "id": "RestSharp",
                "version": "112.1.0"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "Console",
      "type": "folder",
      "files": [
        {
          "name": "hello.cs",
          "content": "using System;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        string message = \"Hello, SharpPad! 关注我: https://github.com/gaoconggit/SharpPad\";\n      \n        message.Dump();\n    }\n}",
          "nugetConfig": {
            "packages": []
          }
        },
        {
          "name": "input.cs",
          "content": "using System;\n\nclass Program\n{\n    public static void Main()\n    {\n        Console.Write(\"请输入你的名字: \");\n        string name = Console.ReadLine();\n        Console.WriteLine($\"你好, {name}!\");\n    }\n}\n"
        }
      ]
    },
    {
      "name": "Web",
      "type": "folder",
      "files": [
        {
          "name": "WebApiHost.cs",
          "content": "// @TestController.cs\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.DependencyInjection;\nusing Swashbuckle.AspNetCore.Swagger;\nusing Swashbuckle.AspNetCore.SwaggerGen;\nusing Swashbuckle.AspNetCore.SwaggerUI;\nusing System.Net;\nusing System.Net.Sockets;\n\npublic class Program\n{\n    public static async Task Main(string[] args)\n    {\n        var builder = WebApplication.CreateBuilder();\n\n        // 禁用默认配置\n        builder.Configuration.Sources.Clear();\n\n        //注入当前程序集\n        var myAssembly = typeof(Program).Assembly;\n        // 添加控制器服务\n        builder.Services.AddControllers()\n            .AddApplicationPart(myAssembly);\n\n        // 添加Swagger服务\n        builder.Services.AddEndpointsApiExplorer();\n        builder.Services.AddSwaggerGen();\n\n        var app = builder.Build();\n\n        app.MapGet(\"/\", () => \"Hello World!\");\n\n        app.MapGet(\"/exit\", (IHostApplicationLifetime appLifetime) =>\n        {\n            appLifetime.StopApplication();\n            return \"Goodbye, World!\";\n        });\n\n        // 使用Swagger中间件\n        app.UseSwagger();\n        app.UseSwaggerUI(c =>\n        {\n            c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\");\n        });\n\n        app.MapControllers();\n\n        int port = GetAvailablePort();\n        Console.WriteLine($\"注意：退出程序访问 http://localhost:{port}/exit\");\n        await app.RunAsync($\"http://localhost:{port}\");\n    }\n\n    public static int GetAvailablePort()\n    {\n        // 尝试从 1024 到 65535 之间查找可用端口\n        for (int port = 1024; port <= 65535; port++)\n        {\n            try\n            {\n                // 创建一个 TcpListener 实例，尝试绑定到指定端口\n                TcpListener listener = new TcpListener(IPAddress.Loopback, port);\n                listener.Start(); // 尝试启动监听\n                listener.Stop();  // 成功启动后停止监听，表示端口可用\n                return port; // 如果没有抛出异常，说明端口可用，返回该端口\n            }\n            catch (SocketException)\n            {\n                // 如果端口被占用，会抛出 SocketException，我们继续尝试下一个端口\n                continue;\n            }\n        }\n\n        throw new InvalidOperationException(\"No available port found.\");\n    }\n}\n",
          "nugetConfig": {
            "packages": []
          }
        },
        {
          "name": "Controllers",
          "type": "folder",
          "files": [
            {
              "name": "TestController.cs",
              "content": "using Microsoft.Extensions.Logging;\nusing System;\nusing Microsoft.AspNetCore.Mvc;\n\n\n[ApiController]\n[Route(\"api/[controller]/[action]\")]\npublic class TestController : ControllerBase\n{\n    private readonly ILogger<TestController> _logger;\n\n    public TestController(ILogger<TestController> logger)\n    {\n        _logger = logger;\n    }\n\n    [HttpGet]\n    public IActionResult Get()\n    {\n        return Ok(new\n        {\n            Date = DateTime.Now,\n            Temperature = 25,\n            Summary = \"Sunny\"\n        });\n    }\n}"
            }
          ]
        }
      ]
    }
  ]
}