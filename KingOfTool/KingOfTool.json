{
  "name": "KingOfTool",
  "type": "folder",
  "files": [
    {
      "name": "逗号分隔",
      "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Linq;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        int[] intArrs = [462204, 2847, 22859, 79926];\n        var result = intArrs.Select(m => $\"'{m}'\");\n\n        string output = string.Join(\",\", result);\n        output.Dump();\n        \n    }\n}"
    },
    {
      "name": "时间戳",
      "content": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // 获取当前时间\n        DateTimeOffset currentTime = DateTimeOffset.UtcNow;\n        // 计算时间戳（秒）\n        long timestampInSeconds = currentTime.ToUnixTimeSeconds();\n        // 计算时间戳（毫秒）\n        long timestampInMilliseconds = currentTime.ToUnixTimeMilliseconds();\n\n        Console.WriteLine(\"当前时间的时间戳（秒）: \" + timestampInSeconds);\n        Console.WriteLine(\"当前时间的时间戳（毫秒）: \" + timestampInMilliseconds);\n    }\n}"
    },
    {
      "name": "json格式化",
      "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        var jsonStr =\n        \"\"\"\n            {\n            \"messages\": [\n\n                {\n\n                \"content\": \"现在时间是:2024-12-10 14:21:24\\n你是一个插件助手，会各种插件的能力，讲话通俗易懂\",\n\n                \"role\": \"system\"\n\n                },\n\n                {\n\n                \"content\": \"你是什么模型\",\n\n                \"role\": \"user\"\n\n                }\n            ],\n\n            \"temperature\": 0.6,\n\n            \"top_p\": 0.5,\n\n            \"n\": 1,\n\n            \"stream\": true,\n\n            \"model\": \"gemini-exp-1206\"\n        }\n          \n        \"\"\";\n\n        var obj = JsonConvert.DeserializeObject(jsonStr);\n        Console.WriteLine(\"```json \\n\" + JsonConvert.SerializeObject(obj, Formatting.Indented) + \"\\n```\");\n    }\n}"
    },
    {
      "name": "正则提取",
      "content": "using System;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\npublic class Program\n{\n    public static void Main()\n    {\n        string str1 = \"步骤\\\"职能负责人（二级部门负责人）\\\"没有满足条件的处理人。\";\n        FetchNodeName(str1).Dump();\n\n        string str2 = \"步骤\\\"成本中心负责人\\\"没有满足条件的处理人。\";\n        FetchNodeName(str2).Dump();\n\n        string str3 = \"步骤\\\"CHR（薪酬福利）\\\"没有满足条件的处理人。\";\n        FetchNodeName(str3).Dump();\n\n    }\n\n    public static string FetchNodeName(string str)\n    {\n        Regex regex = new Regex($\"^步骤\\\\s*[\\\"“](?<NodeName>.*)[\\\"”]\\\\s*没有满足条件的处理人。$\", RegexOptions.IgnoreCase);\n\n        Match match = regex.Match(str);\n\n        return match.Groups[\"NodeName\"].Value;\n    }\n}"
    },
    {
      "name": "JWT解析",
      "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        string token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\";\n\n        // 定义一个字段排序顺序字典 \n        var fieldOrder = new Dictionary<string, int>()\n        {\n            { \"exp\", 0 },\n            { \"iss\", 1 },\n            { \"aud\", 2 },\n            { \"client_id\", 3 },\n            { \"sub\", 4 },\n            { \"auth_time\", 5 },\n            { \"idp\", 6 },\n            { \"userid\", 7 },\n            { \"tenantid\", 8 },\n            { \"tenantname\", 9 },\n            { \"scope\", 10 },\n        };\n\n        JwtSecurityTokenHandler tokenHandler = new JwtSecurityTokenHandler();\n        JwtSecurityToken jwtToken = tokenHandler.ReadJwtToken(token);\n\n        Console.WriteLine(\"```json Header:\");\n        JsonConvert.SerializeObject(jwtToken.Header, Newtonsoft.Json.Formatting.Indented).Dump();\n        Console.WriteLine(\"```\");\n\n        Console.WriteLine(\"```json Payload:\");\n        // 将JWT令牌的负载解析为字典类型\n        var payloadDict = new Dictionary<string, object>();\n        foreach (var claim in jwtToken.Payload.Claims)\n        {\n            if (payloadDict.ContainsKey(claim.Type))\n            {\n                // 如果键已经存在，尝试将其值解析为数组并追加新值，否则执行添加操作\n                if (payloadDict[claim.Type] is object[] valueArray)\n                {\n                    payloadDict[claim.Type] = valueArray.Append(claim.Value).ToArray();\n                }\n                else\n                {\n                    payloadDict[claim.Type] = new object[] { payloadDict[claim.Type], claim.Value };\n                }\n            }\n            else\n            {\n                payloadDict.Add(claim.Type, claim.Value);\n            }\n        }\n\n        // 将字典按照预定义的顺序排序\n        var sortedDict = payloadDict.OrderBy(x => fieldOrder.ContainsKey(x.Key) ? fieldOrder[x.Key] : int.MaxValue)\n                                     .ToDictionary(x => x.Key, x => x.Value);\n\n        // 输出JWT令牌的负载部分\n        var json = JsonConvert.SerializeObject(sortedDict, Newtonsoft.Json.Formatting.Indented);\n        Console.WriteLine(json);\n\n    }\n}",
      "nugetConfig": {
        "packages": []
      }
    },
    {
      "name": "HttpPostJson",
      "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Text;\n\nnamespace login\n{\n    public class Program\n    {\n        public async static Task Main()\n        {\n            var url = \"你的url\";\n\n            var body = \"\"\"\n                   {\n                     \n                   }\n                \"\"\";\n\n            await PostJsonAsync(url, body, showReqHeaders: false, showResHeaders: false);\n        }\n\n        #region PostJsonAsync\n        public static async Task PostJsonAsync(string url, string reqJson, bool showReqHeaders = false, bool showResHeaders = false)\n        {\n            using var client = new HttpClient();\n\n            var request = new HttpRequestMessage(HttpMethod.Post, url)\n            {\n                Content = new StringContent(reqJson, Encoding.UTF8, \"application/json\")\n            };\n\n            // 设置请求头（如果需要添加其他的头，也在下面添加）\n            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            if (showReqHeaders)\n            {\n                // 记录请求头\n                Console.WriteLine(\"Request Headers:\\n\");\n                Console.WriteLine(\"```json\\n\");\n\n                // 添加 URL 和 HTTP Method\n                Console.WriteLine($\"{request.Method} {url}\");\n                foreach (var header in request.Headers)\n                {\n                    Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n                }\n                Console.WriteLine(\"```\");\n            }\n\n            var response = await client.SendAsync(request);\n\n            if (showResHeaders)\n            {\n                // 记录响应头\n                Console.WriteLine(\"\\nResponse Headers:\");\n                Console.WriteLine(\"```json\\n\");\n                foreach (var header in response.Headers)\n                {\n                    Console.WriteLine($\"{header.Key}: {string.Join(\", \", header.Value)}\");\n                }\n                Console.WriteLine(\"```\");\n            }\n\n            var body = await response.Content.ReadAsStringAsync();\n\n            Console.WriteLine(\"\\nResponse Body:\");\n            var obj = JsonConvert.DeserializeObject(body);\n            Console.WriteLine(\"```json \\n\" + JsonConvert.SerializeObject(obj, Formatting.Indented) + \"\\n```\");\n        }\n        #endregion\n    }\n}",
      "nugetConfig": {
        "packages": []
      }
    },
    {
      "name": "UrlEncode",
      "content": "using System;\nusing System.Net;\n\nclass Program\n{\n    static void Main()\n    {\n        string original = \"你好，爸爸!\";\n        string encoded = WebUtility.UrlEncode(original);\n        Console.WriteLine(encoded); // 输出: %E4%BD%A0%E5%A5%BD%EF%BC%8C%E7%88%B8%E7%88%B8%21\n    }\n}"
    },
    {
      "name": "UrlDecode",
      "content": "using System;\nusing System.Net;\n\nclass Program\n{\n    static void Main()\n    {\n        string encoded = \"%E4%BD%A0%E5%A5%BD%EF%BC%8C%E7%88%B8%E7%88%B8%21\";\n        string decoded = WebUtility.UrlDecode(encoded);\n        Console.WriteLine(decoded); // 输出: 你好，爸爸!\n    }\n}"
    },
    {
      "name": "QueryStringParse",
      "content": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Web;\nusing System.Collections.Generic;\n\nclass Program\n{\n    public static async Task Main()\n    {\n        string url = \"http://qq.com?a=1&b=2\";\n\n        int index = url.IndexOf('#');\n        if (index != -1)\n        {\n            // 用 '?' 替换第一个 '#'\n            url = url.Remove(index, 1).Insert(index, \"?\");\n        }\n        Uri uri = new Uri(url);\n        string queryString = uri.Query;\n\n        // 移除开头的 '?'\n        if (queryString.StartsWith(\"?\"))\n        {\n            queryString = queryString.Substring(1);\n        }\n\n        // 解析 QueryString\n        Dictionary<string, string> queryParameters = new Dictionary<string, string>();\n        foreach (var kvp in queryString.Split('&'))\n        {\n            var keyValue = kvp.Split('=');\n            if (keyValue.Length == 2)\n            {\n                string key = Uri.UnescapeDataString(keyValue[0]);\n                string value = Uri.UnescapeDataString(keyValue[1]);  // 解码 URL 编码的值\n                queryParameters[key] = value;\n            }\n        }\n\n        // 输出\n        foreach (var kvp in queryParameters)\n        {\n            Console.WriteLine($\"{kvp.Key}: {kvp.Value}\");\n        }\n    }\n}"
    }
  ]
}